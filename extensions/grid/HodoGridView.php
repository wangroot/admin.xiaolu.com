<?php
/**
 * Created by PhpStorm.
 * User: i-sheng
 * Date: 15-11-23
 * Time: 上午10:31
 */

namespace app\extensions\grid;


use app\extensions\widget\HodoLinkPager;
use yii\base\Model;
use yii\grid\Column;
use yii\grid\DataColumn;
use yii\grid\GridView;
use yii\helpers\Html;
use yii\data\ActiveDataProvider;
use yii\db\ActiveQueryInterface;
use app\assets\BootstrapSwitchAsset;

class HodoGridView extends GridView
{

    public $options = ['class' => 'grid-view table-responsive'];
    const FOOTERTEXT = '底部统计';
    public $layout = "
    {summary}\n
    {pager}\n
    {items}\n
    {pager}
    ";
    public $tableOptions = ['class' => 'table table-striped table-hover table-bordered table-condensed table-responsive'];

    public $visibleDropdownColumn = [];
    public $showFooter = false;
    public $dataColumnClass = 'app\extensions\grid\HodoDataColumn';
    public $footerRowOptions = ['class' => 'success'];

    public function registerBootstrapSwitchJs(){
       /* $js =<<<JS
$(".xl-switch-status").bootstrapSwitch({

});
JS;
        $view = $this->view;
        BootstrapSwitchAsset::register($view);
        $view->registerJs($js);*/
    }
    /**
     * Initializes the grid view.
     * This method will initialize required property values and instantiate [[columns]] objects.
     */
    public function init()
    {
        $columns = $this->columns;
        parent::init(); // TODO: Change the autogenerated stub
        $provider = $this->dataProvider;
        if ($provider instanceof ActiveDataProvider && $provider->query instanceof ActiveQueryInterface) {
            /* @var $model Model */
            $model = new $provider->query->modelClass;
            $this->MenuDrop($columns, $model);

        } else {
            $models = $provider->getModels();
            if (($model = reset($models)) instanceof Model) {
                /* @var $model Model */
                $this->MenuDrop($columns, $model);
            }
        }
        if(!isset($this->columns[0]->footer ))
            $this->columns[0]->footer = self::FOOTERTEXT;

        $this->pager = ['class' => HodoLinkPager::className()];
    }
    /**
     * Runs the widget.
     */
    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub
       // var_dump( $models = array_values($this->dataProvider->getModels()),
       // $keys = $this->dataProvider->getTotalCount());die;
        $this->registerPjax();
        $this->registerBootstrapSwitchJs();
    }


    /**
     * Creates column objects and initializes them.
     */
    protected function initColumns()
    {
        parent::initColumns(); // TODO: Change the autogenerated stub
        $post = \Yii::$app->request->post('filter');
        if (!empty($post)) {
            $post =  array_map(function($a){
                return array_keys($a);
            }, $post);
            $post = call_user_func_array('array_merge', $post);
        }else
            $post = [];

        foreach ($this->columns as $i => $column) {
            if ($column instanceof DataColumn) {
                if(in_array($column->attribute, $post)){
                    unset($this->columns[$i]);
                    continue;
                }
            }
        }
    }

    /**
     * 注册表单跟gridview的ajax pushstatus 请求
     */
    public function registerPjax(){
       $filterUrl = $this->dataProvider->getPagination()->createUrl($this->dataProvider->getPagination()->page);
        $js =<<<JS
//过渡字段
var options = [];
$( '#hodo-grid-view .dropdown-menu a' ).on( 'click', function( event ) {
   var target = $( event.currentTarget ),
       val = target.attr( 'data-value' ),
       str = target.text(),
       json = {},
       inp = target.find( 'input' ),
       idx;
   if ( ( idx = options.indexOf( val ) ) > -1 ) {
      options.splice( idx, 1 );
      setTimeout( function() { inp.prop( 'checked', false ) }, 0);
   } else {
        json[val] = str;
        options.push( json );
        setTimeout( function() { inp.prop( 'checked', true ) }, 0);
   }
   $( event.target ).blur();
   console.log( options,str );

   return false;
});

$('.hodo-filters').on('click', function() {
    if(!options){
        return false;
    }
    $.pjax({
      url: '{$filterUrl}',
      container: "#hodo-grid-view",
      type: "POST",
      data: {filter:options}
    });
});
//重新加载数据
$("#hodo-search-form").on("pjax:end", function(){
    $.pjax.reload({container:"#hodo-grid-view"});

});

JS;
        $this->view->registerJs($js);
    }

    /**
     * @inheritdoc
     */
    public function renderSection($name)
    {
        switch ($name) {
            case "{fileterColumns}":
                return $this->filterCoulumn();
            default:
                return parent::renderSection($name);
        }
    }

    /**
     * @return string
     */

    public function filterCoulumn(){

        $li = '';
        $post = [];
        if (is_array(\Yii::$app->request->post('filter'))) {
            $post = call_user_func_array('array_merge', \Yii::$app->request->post('filter'));
        }
        foreach($this->visibleDropdownColumn as $field => $name){
            if(empty($field)) continue;
            $check = false;
            if(isset($post[$field])){
                $check = true;
            }
           $li .=  Html::tag('li',Html::tag('a',Html::checkbox('', $check, []).'&nbsp;'.$name,[ 'data-value' => $field, "class" => "small","tabIndex"=>"-1" ]));
        }
            $html =<<<EOD
<div class="col-md-1 drop-filter">
 <div class="button-group">
    <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-cog"></span> <span class="caret"></span></button>
    <ul class="dropdown-menu">
      {$li}
      <li class="text-center">
        <input class="btn btn-success btn-sm hodo-filters" type="button" value="过滤" />&nbsp;
      </li>
     </ul>

</div>
</div>
EOD;
        return $html;
    }

    /**
     * @param $columns
     * @param $model
     */
    protected function MenuDrop($columns, $model)
    {
        foreach ($columns as $column) {
            if (is_string($column)) {
                $this->visibleDropdownColumn[$column] = $model->attributeLabels()[$column];
            }
            if (is_array($column)) {
                $this->visibleDropdownColumn[$column['attribute']] = $model->attributeLabels()[$column['attribute']];
            }

        }
    }

}